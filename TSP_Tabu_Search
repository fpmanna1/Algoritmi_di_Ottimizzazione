{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d01bfaf6",
   "metadata": {},
   "source": [
    "# Import delle librerie"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "58184236",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import time\n",
    "from collections import deque"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6f72d55",
   "metadata": {},
   "source": [
    "# Definizione della distanza euclidea\n",
    "Calcola la distanza euclidea tra due città"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8507965d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def distance(city1, city2):\n",
    "    x_diff = city1[0] - city2[0]\n",
    "    y_diff = city1[1] - city2[1]\n",
    "    return math.sqrt(x_diff**2 + y_diff**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adfc9bd6",
   "metadata": {},
   "source": [
    "# Calcolo lunghezza percorso\n",
    "\n",
    "*Data una lista di città e un ordine di visita delle città, calcola la lunghezza del percorso utilizzando la funzione distance.\n",
    "L'operatore modulo, insieme a i+1, mi permette di considerare anche la distanza tra l'ultima città e la prima città, a cui corrisponde l'arco che mi permette di chiudere un ciclo hamiltoniano.\n",
    "Infatti, all'ultima iterazione del for, city1 sarà uguale a num_cities (quindi l'ultima città), e city2 sarà uguale a (num_cities + 1) % num_cities, ossia uguale a 1.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e6cee725",
   "metadata": {},
   "outputs": [],
   "source": [
    "def path_length(cities, order):\n",
    "    # Calcola la lunghezza totale del percorso\n",
    "    length = 0\n",
    "    num_cities = len(cities)\n",
    "    for i in range(num_cities):\n",
    "        city1 = cities[order[i]]\n",
    "        city2 = cities[order[(i+1) % num_cities]]\n",
    "        length += distance(city1, city2)\n",
    "    return length"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "757fa1f2",
   "metadata": {},
   "source": [
    "# Lettura istanza benchmark del TSP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d4e71a87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name Processed\n",
      "Dimension Processed\n",
      "Node Coord Section Processed\n"
     ]
    }
   ],
   "source": [
    "cities = []\n",
    "\n",
    "fileName = \"att48\"\n",
    "#fileName = \"berlin52\"\n",
    "#fileName = \"d198\"\n",
    "\n",
    "file = open(fileName + \".tsp\", \"r\")\n",
    "\n",
    "line = file.readline()\n",
    "while not line.startswith(\"EOF\"):\n",
    "\n",
    "    if line.startswith(\"NAME: \"):\n",
    "        print(\"Name Processed\")\n",
    "        name = line.replace(\"NAME: \", \"\")\n",
    "        line = file.readline()\n",
    "        \n",
    "    elif line.startswith(\"DIMENSION: \"):\n",
    "        print(\"Dimension Processed\")\n",
    "        num_cities = int(line.replace(\"DIMENSION: \", \"\"))\n",
    "        line = file.readline()\n",
    "\n",
    "    elif line.startswith(\"NODE_COORD_SECTION\"):\n",
    "        print(\"Node Coord Section Processed\")\n",
    "        line = file.readline()     \n",
    "        for i in range(0, int(num_cities)):\n",
    "            split_line = line.split(\" \")\n",
    "            cities.append((float(split_line[1]), float(split_line[2])))\n",
    "            line = file.readline()\n",
    "            \n",
    "    else: line = file.readline()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40e7aee7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ca8aa190",
   "metadata": {},
   "source": [
    "# Plot della soluzione"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "21f984a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_tsp(cities, order):\n",
    "    \n",
    "    # Estrai le coordinate x e y delle città\n",
    "    x = [city[0] for city in cities]\n",
    "    y = [city[1] for city in cities]\n",
    "\n",
    "    # Aggiungi la prima città all'ordine di visita per chiudere il ciclo hamiltoniano\n",
    "    order.append(order[0])\n",
    "\n",
    "    # Estrai le coordinate x e y nel miglior ordine di visita\n",
    "    x_ordered = [x[i] for i in order]\n",
    "    y_ordered = [y[i] for i in order]\n",
    "\n",
    "    # Creo il grafico\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.plot(x_ordered, y_ordered, 'o-')\n",
    "    plt.plot(x_ordered[0], y_ordered[0], 'ro')  # Marca la prima città con un punto rosso\n",
    "    plt.xlabel('latitudine')\n",
    "    plt.ylabel('longitudine')\n",
    "    plt.title('Ciclo Hamiltoniano')\n",
    "    plt.grid(True)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2212111",
   "metadata": {},
   "source": [
    "# Generazione della soluzione iniziale\n",
    "\n",
    "*Genera un ordine di visita iniziale in modo casuale.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e664102f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_initial_solution(num_cities):\n",
    "    # Genera una soluzione iniziale casuale\n",
    "    \n",
    "    initial_solution = list(range(num_cities))\n",
    "    random.shuffle(initial_solution)\n",
    "    \n",
    "    return initial_solution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43c02e67",
   "metadata": {},
   "source": [
    "# Euristica Tabu Search\n",
    "\n",
    "*Per l'euristica tabu search è stato fissato il seguente criterio di aspirazione: se una mossa mi fa ottenere un valore di funzione obiettivo migliore della soluzione migliore globale fino a quel momento, allora faccia la mossa anche se è presente in lista tabu.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "96ce9fc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tabu_search(cities, num_iterations, tabu_size):\n",
    "    \n",
    "    num_cities = len(cities)\n",
    "    \n",
    "    # Genera una soluzione iniziale casuale\n",
    "    current_solution = generate_initial_solution(num_cities)\n",
    "    \n",
    "    #soluzione globale\n",
    "    best_solution = current_solution.copy() # inizializzo la migliore soluzione con la soluzione iniziale\n",
    "    best_solution_length = path_length(cities, best_solution)\n",
    "    \n",
    "    # Inizializza la lista tabu\n",
    "    tabu_list = deque(maxlen=tabu_size)\n",
    "    \n",
    "    for k in range(num_iterations):\n",
    "        #Flag utilizzato per approccio First improvement\n",
    "        #found_improvement = False \n",
    "        \n",
    "        # Inizializza la migliore soluzione locale\n",
    "        best_neighbor = None \n",
    "        best_neighbor_length = float('inf') # valore del percorso minimo\n",
    "        \n",
    "        move = None\n",
    "        \n",
    "        #genera mossa scambiando due citta\n",
    "        for city1 in range(len(current_solution)):\n",
    "            for city2 in range(city1 + 1, len(current_solution)):\n",
    "                #Data la soluzione, current_solution, effettua la mossa su di essa\n",
    "                neighbor = current_solution.copy()\n",
    "                neighbor[city1], neighbor[city2] = neighbor[city2], neighbor[city1] #mossa\n",
    "\n",
    "                #Salva la mossa, ovvero la tupla contentene le due citta scambiate\n",
    "                move = (current_solution[city1], current_solution[city2]) \n",
    "                \n",
    "                #Salva il -valore- della soluzione locale corrente trovata in una variabile\n",
    "                neighbor_length = path_length(cities, neighbor)\n",
    "\n",
    "                #Se la soluzione locale corrente risulta essere migliore della precedente, neighbor_length < best_neighbor_length, allora aggiorna i valori\n",
    "                #Oppure se la mossa risulta essere tabu, controlla se la soluzione locale corrente dovesse migliorare il valore della funzione obiettivo, neighbor_length < best_solution_length.\n",
    "                if ((neighbor_length < best_neighbor_length) and move not in tabu_list) or \\\n",
    "                (move in tabu_list and (neighbor_length < best_solution_length)): # criterio di aspirazione\n",
    "                    best_neighbor = neighbor\n",
    "                    best_neighbor_length = neighbor_length\n",
    "                    #found_improvement = True   #First improvement\n",
    "                    #break                      #First improvement\n",
    "                    \n",
    "            #if found_improvement:              #First improvement\n",
    "             #   break                          #First improvement\n",
    "                    \n",
    "        # Aggiorna la soluzione corrente con la migliore soluzione vicina; dalla soluzione corrente deve essere applicata nuovamente la mossa\n",
    "        current_solution = best_neighbor\n",
    "        \n",
    "        # salva attributi mossa e accodala nella lista tabu\n",
    "        city1, city2 = move\n",
    "        tabu_list.append(move)\n",
    "        \n",
    "        # Aggiorna la migliore soluzione globale\n",
    "        if best_neighbor_length < path_length(cities, best_solution): #Errore, non si dovrebbe utilizzare path_length, ma una variabile, ovvero best_solution_length\n",
    "            best_solution = best_neighbor                             #poiche tale funzione viene invocata un numero pari al numero di iterazioni impostato ad ogni controllo del ramo if\n",
    "            best_solution_length = best_neighbor_length\n",
    "                    \n",
    "    return best_solution, best_solution_length\n",
    "    \n",
    "\n",
    "    #VECCHIO CODICE \n",
    "    \"\"\"\n",
    "    for i in range(num_iterations):\n",
    "        \n",
    "        # Genera il vicinato della soluzione corrente\n",
    "        neighborhood = generate_neighborhood(current_solution)\n",
    "        \n",
    "        # Calcola la lunghezza totale del percorso della soluzione corrente\n",
    "        current_length = path_length(cities, current_solution)\n",
    "        \n",
    "        # Inizializza la migliore soluzione vicina\n",
    "        best_neighbor = None # ordine di visita delle città\n",
    "        best_neighbor_length = float('inf') # valore del percorso minimo\n",
    "        \n",
    "        for neighbor in neighborhood:\n",
    "            # Calcola la distanza totale del vicino\n",
    "            neighbor_length = path_length(cities, neighbor)\n",
    "            \n",
    "            # Verifica se il vicino è migliore della soluzione corrente e non è tabu, seguendo una strategia best-improvement\n",
    "            if (neighbor_length < best_neighbor_length and neighbor not in tabu_list) or \\\n",
    "            (neighbor in tabu_list and (neighbor_length < best_solution_length)): # criterio di aspirazione\n",
    "                best_neighbor = neighbor\n",
    "                best_neighbor_length = neighbor_length\n",
    "                #break # inserendo questo break seguo una strategia first-improvement\n",
    "            \n",
    "        \n",
    "        # Aggiorna la soluzione corrente con la migliore soluzione vicina\n",
    "        current_solution = best_neighbor\n",
    "        \n",
    "        # Aggiorna la lista tabu\n",
    "        tabu_list.append(best_neighbor)\n",
    "        \n",
    "        # Aggiorna la migliore soluzione globale\n",
    "        if best_neighbor_length < path_length(cities, best_solution):\n",
    "            best_solution = best_neighbor\n",
    "            best_solution_length = best_neighbor_length\n",
    "        \n",
    "        # Rimuove le soluzioni più vecchie dalla lista tabu\n",
    "        if len(tabu_list) > tabu_size:\n",
    "            tabu_list.pop(0)\n",
    "    \n",
    "    return best_solution, best_solution_length\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d55b6d1e",
   "metadata": {},
   "source": [
    "# Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cb0c60b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Durata tempo di esecuzione :  50.292449712753296  secondi\n",
      "Miglior percorso trovato: [8, 0, 21, 2, 22, 10, 11, 14, 30, 43, 17, 6, 35, 27, 29, 5, 36, 18, 26, 16, 42, 31, 23, 25, 3, 1, 28, 33, 40, 15, 7, 37, 45, 32, 19, 38, 44, 34, 9, 41, 4, 47, 24, 13, 12, 20, 46, 39] \n",
      "\n",
      "Lunghezza percorso minimo: 44999.362657383084\n",
      "Gap :  34.23429483454072 %\n"
     ]
    }
   ],
   "source": [
    "num_cities = len(cities)\n",
    "\n",
    "num_iterations = 1000\n",
    "tabu_size = int(np.sqrt(num_cities))\n",
    "\n",
    "tic = time.time()\n",
    "\n",
    "best_order, min_length = tabu_search(cities, num_iterations, tabu_size)\n",
    "\n",
    "toc = time.time()\n",
    "\n",
    "print(\"Durata tempo di esecuzione : \",toc-tic,\" secondi\")\n",
    "\n",
    "# Calcolo del GAP    \n",
    "if(fileName == \"att48\"):\n",
    "    gap = ((np.abs(33523 - min_length))/33523)*100\n",
    "if(fileName == \"berlin52\"):\n",
    "    gap = ((np.abs(7542 - min_length))/7542)*100\n",
    "if(fileName == \"d198\"):\n",
    "    gap = ((np.abs(15780 - min_length))/15780)*100\n",
    "\n",
    "    \n",
    "print(\"Miglior percorso trovato:\", best_order,\"\\n\")\n",
    "print(\"Lunghezza percorso minimo:\", min_length)\n",
    "print(\"Gap : \",gap,\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52a0fa5f",
   "metadata": {},
   "source": [
    "# Grafici"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c5275658",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"\n",
    "plt.plot(range(len(temperatures)), temperatures)\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('Temperatura')\n",
    "plt.title('Andamento della temperatura nel tempo')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(30,30))\n",
    "plt.plot(np.arange(len(path_lengths_list)), path_lengths_list)\n",
    "plt.xlabel('Iterazione')\n",
    "plt.ylabel('Lunghezza Minima')\n",
    "plt.title('Andamento lunghezza minimo percorso')\n",
    "plt.show()\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "plot_tsp(cities, best_order)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4699480",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
